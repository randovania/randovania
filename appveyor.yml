image: Visual Studio 2017

branches:
  # blacklist
  except:
    - gh-pages
    - travis

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python37-x64"

install:
  - git submodule update --init --recursive
  - set PATH=%PYTHON%\Scripts;%PATH%
  - "%PYTHON%\\python.exe -m pip install --upgrade pip"
  - "%PYTHON%\\python.exe -m pip install https://github.com/enthought/pywin32-ctypes/archive/master.zip"
  # TODO: disable PEP 517 to dodge problem installing PyInstaller https://github.com/pypa/pip/issues/6163
  - "%PYTHON%\\python.exe -m pip install -r requirements.txt --no-use-pep517"
  - "%PYTHON%\\python.exe -m pip install -e ."
  - "%PYTHON%\\python.exe -m pip install codecov"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "%PYTHON%\\python.exe setup.py bdist_wheel"
  - "%PYTHON%\\python.exe -m pytest --cov randovania --skip-generation-tests"
  - "%PYTHON%\\python.exe create_windows_release.py"
  - dist\randovania\randovania.exe --version
  - dist\randovania\randovania.exe --pytest --skip-gui-tests --skip-echo-tool

# after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
#  - >
#    IF "%APPVEYOR_REPO_TAG%" == "true"
#    (
#    "%PYTHON%\\python.exe" -m twine upload dist\*.whl
#    )

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*.zip
    name: release

on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
  - codecov
  - ps: Invoke-RestMethod https://raw.githubusercontent.com/DiscordHooks/appveyor-discord-webhook/23a1c4358e9fd64273720c2ca79a004730f9a0bc/send.ps1 -o send.ps1
  - ps: ./send.ps1 success $env:WEBHOOK_URL

on_failure:
  - ps: Invoke-RestMethod https://raw.githubusercontent.com/DiscordHooks/appveyor-discord-webhook/23a1c4358e9fd64273720c2ca79a004730f9a0bc/send.ps1 -o send.ps1
  - ps: ./send.ps1 failure $env:WEBHOOK_URL

deploy:
  description: 'Release description'
  provider: GitHub
  auth_token:
    secure: OYbosmQKuS8Qh+fNvEwP3OPg/qOVeLKW03kWhwGmlu4jSEDS35klfiw8Rz6jDKKe
  artifact: release             # upload the packaged Release
  draft: true
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
    PYTHON: "C:\\Python37-x64"
