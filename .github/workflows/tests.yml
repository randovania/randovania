name: Python Package

on:
  pull_request:
  push:
    branches:
      - main
      - stable
    tags:
      - 'v*.*.*'

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'ubuntu-latest'
            python: '3.10'
            executable: false
            name: 'Linux'

          - os: 'ubuntu-latest'
            python: '3.10'
            executable: true
            name: 'Linux Executable'

          - os: 'macos-latest'
            python: '3.10'
            executable: false
            name: 'macOS'

          - os: 'macos-latest'
            python: '3.10'
            executable: true
            name: 'macOS Executable'

          - os: 'windows-latest'
            python: '3.10'
            executable: false
            name: 'Windows'

          - os: 'windows-latest'
            python: '3.10'
            executable: true
            name: 'Windows Executable'

          - os: 'windows-latest'
            python: '3.10'
            executable: false
            name: 'Resolver'

    runs-on: ${{ matrix.os }}

    name: ${{ matrix.name }}

    env:
      # Due to https://github.com/eventlet/eventlet/issues/670, merely importing eventlet during a test running with
      # pytest-async causes an error. Settings EVENTLET_IMPORT_VERSION_ONLY allows us to avoid that error, but this
      # instead causes the flask_socketio to fail importing. Setting FLASK_RUN_FROM_CLI causes it to default to the
      # threading async method instead, avoiding the issue
      EVENTLET_IMPORT_VERSION_ONLY: ${{ fromJSON('[0, 1]')[matrix.os == 'macos-latest'] }}
      FLASK_RUN_FROM_CLI: ${{ fromJSON('[0, 1]')[matrix.os == 'macos-latest'] }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-shape0 libgl1-mesa-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Install core Python packages
        run: python -m pip install --upgrade -r requirements-setuptools.txt

      - name: Install Python packages
        run: python -m pip install -r requirements.txt -e . -e ".[gui]" -e ".[server]" -e ".[test]"

      - name: Install extra Python packages (Linux)
        run: python -m pip install -r requirements-xvfb.txt
        if: matrix.os == 'ubuntu-latest'

      - name: build whell
        run: python setup.py bdist_wheel

      - name: build sdist
        run: python setup.py sdist
        if: ${{ !matrix.executable && matrix.os == 'ubuntu-latest' }}

      - name: run pytest (no resolver)
        run: python -m pytest --cov randovania --cov-report=xml --skip-resolver-tests -n auto --durations=100
        if: ${{ !matrix.executable && matrix.name != 'Resolver' }}

      - name: run pytest (resolver)
        run: python -m pytest --cov randovania --cov-report=xml --durations=100 -n auto test/resolver/test_resolver.py
        if: ${{ matrix.name == 'Resolver' }}

      - name: create executable
        run: python -u tools/create_release.py
        if: matrix.executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: ${{ startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/stable') }}

      - name: executable check
        run: dist/randovania/randovania --version
        if: matrix.executable

      - name: executable test
        run: dist/randovania/randovania --pytest --skip-gui-tests --skip-echo-tool --skip-resolver-tests --durations=100 --ignore=test/server
        if: matrix.executable

      - name: codecov
        uses: codecov/codecov-action@v3
        if: ${{ !matrix.executable }}
        with:
          fail_ci_if_error: false  # Ideally this would be true, but codecov's action keep getting errors with GH api and it doesn't do retries
          files: ./coverage.xml

      - name: Upload artifacts
        if: ${{ matrix.executable }}
        uses: actions/upload-artifact@v3
        with:
          name: Randovania ${{ matrix.name }}
          if-no-files-found: error
          path: |
            dist/randovania-*.zip
            dist/randovania-*.tar.gz
            dist/randovania-*.7z

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ !matrix.executable && startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest' }}
        run: |
          python -m pip install twine
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}

  installer:
    runs-on: windows-latest
    needs: pytest
    name: Build Windows Installer
    if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Download the executable
        uses: actions/download-artifact@v3
        with:
          name: Randovania Windows Executable
          path: packages/

      - name: Get version
        id: version
        shell: bash
        run: |
          echo "::set-output name=version::$(ls packages/ | cut -f2 -d- | sed 's/.dev/./')"

      - name: Extract executable
        run: |
          7z x packages/* -odist

      - name: Rename the extracted package
        shell: bash
        run: |
          mv dist/randovania-* dist/randovania

      - name: import windows certificate
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_SIGNING_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: Deploy Advanced Installer
        uses: caphyon/advinst-github-action@v1.0
        with:
          advinst-version: '19.8.1'
          advinst-license: ${{ secrets.ADVANCED_INSTALLER_LICENSE }}
          advinst-enable-automation: 'true'

      - name: Make changes for dev installer
        shell: pwsh
        if: ${{ !startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/heads/stable') }}
        run: |
          # Load the AIP project from checkout location
          $aipPath = join-path $env:GITHUB_WORKSPACE "tools/Randovania Installer.aip";
          Write-Host "AIP: $aipPath";
          $advinst = new-object -com advancedinstaller;
          $project = $advinst.LoadProject($aipPath);
          $productDetails = $project.ProductDetails;

          # Use dev upgrade code
          $productDetails.UpgradeCode.UpgradeCode = "{7583BC7E-D9ED-4428-A9AD-AE60AE48D4A2}";
          # Use dev name
          $productDetails.Name = "Randovania Dev";
          
          # Save the changes
          $project.Save();

      - name: Create Windows installer
        shell: pwsh
        run: |
          # Load the AIP project from checkout location
          $aipPath = join-path $env:GITHUB_WORKSPACE "tools/Randovania Installer.aip";
          Write-Host "AIP: $aipPath";
          $advinst = new-object -com advancedinstaller;
          $project = $advinst.LoadProject($aipPath);
          $productDetails = $project.ProductDetails;
          
          # Bump the ProductVersion
          $productDetails.Version = "${{ steps.version.outputs.version }}";
          Write-Host "Version: $productDetails.Version";
          
          # Build the project
          $project.Build();

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: Randovania Windows Installer
          if-no-files-found: error
          path: |
            dist/Randovania*Installer.exe

  lint:
    runs-on: 'windows-latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-lint.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python packages
        run: |
          python -m pip install --upgrade -r requirements-setuptools.txt
          python -m pip install -r requirements-lint.txt

      - name: Test if requirements files are up to date
        run: |
          python tools/update_requirements.py --quiet
          git diff --exit-code
          

  release:
    runs-on: 'ubuntu-latest'
    name: Github Release
    needs:
      - pytest
      - installer
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Download the executables
        uses: actions/download-artifact@v3
        with:
          path: packages/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@2.3.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/**
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          body: "Release executable"

  discord_alert:
    runs-on: 'ubuntu-latest'
    name: Discord Alert
    needs:
      - pytest
      - installer
    if: ${{ startsWith(github.ref, 'refs/heads/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download the executables
        uses: actions/download-artifact@v3
        with:
          path: packages/

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python packages
        run: |
          python -m pip install --upgrade -r requirements-setuptools.txt
          python -m pip install -e . aiohttp -c requirements.txt

      - name: Discord Notifications
        run: python tools/post_discord_webhook.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
