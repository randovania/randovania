name: Python Package

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'ubuntu-latest'
            python: '3.7'
            executable: false
            name: 'Linux'

          - os: 'macos-latest'
            python: '3.7'
            executable: false
            name: 'macOS'

          - os: 'macos-latest'
            python: '3.7.7'
            executable: true
            name: 'macOS Executable'

          - os: 'windows-latest'
            python: '3.7'
            executable: false
            name: 'Windows'

          - os: 'windows-latest'
            python: '3.7.7'
            executable: true
            name: 'Windows Executable'

    runs-on: ${{ matrix.os }}

    name: ${{ matrix.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0
        if: matrix.os == 'ubuntu-latest'
      
      - name: Install Python packages
        run: |
          python -m pip install --upgrade -r requirements-setuptools.txt
          python -m pip install -r requirements.txt
          python -m pip install -e . -e ".[gui]" -e ".[server]" -e ".[test]"

      - name: Install extra Python packages (Linux)
        run: python -m pip install -r requirements-xvfb.txt
        if: matrix.os == 'ubuntu-latest'

      - name: build py
        run: python setup.py bdist_wheel

      - name: build py
        run: python setup.py sdist
        if: ${{ !matrix.executable && matrix.os == 'ubuntu-latest' }}
      
      - name: run pytest
        run: python -m pytest --cov randovania
        if: ${{ !matrix.executable }}

      - name: create executable
        run: python tools/create_release.py
        if: matrix.executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: executable check
        run: dist/randovania/randovania --version
        if: matrix.executable

      - name: executable test
        run: dist/randovania/randovania --pytest --skip-gui-tests --skip-echo-tool
        if: matrix.executable
      
      - name: codecov
        uses: codecov/codecov-action@v1

      - name: Upload executable to Bintray
        if: ${{ matrix.executable && startsWith(github.ref, 'refs/heads/') }}
        run: python tools/upload_release_to_bintray.py
        env:
          BINTRAY_USER: henriquegemignani
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: ${{ matrix.executable && startsWith(github.ref, 'refs/tags/v') }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/randovania-*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: "Release executable"

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ !matrix.executable && startsWith(github.ref, 'refs/tags/v') && matrix.os == 'ubuntu-latest' }}
        run: |
          python -m pip install -r requirements-twine.txt
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}

  discord_alert:
    runs-on: 'ubuntu-latest'
    needs: pytest
    if: ${{ startsWith(github.ref, 'refs/heads/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python packages
        run: |
          python -m pip install --upgrade -r requirements-setuptools.txt
          python -m pip install -r requirements.txt
          python -m pip install -e .

      - name: Discord Notifications
        run: python tools/post_discord_webhook.py
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
