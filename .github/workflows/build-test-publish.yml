name: Python

on:
  workflow_dispatch:
    inputs:
      deploy_server:
        description: 'Should this build also update the server?'
        default: false
        type: boolean
      server_environment:
        description: 'Which server to deploy to. Only used for the `stable` branch.'
        type: choice
        options:
          - staging
          - production

  pull_request:
  merge_group:
  push:
    branches:
      - main
      - stable
    tags:
      - 'v*.*.*'

jobs:
  wheel:
    runs-on: 'ubuntu-latest'
    name: Wheel
    if: ${{ github.event_name != 'merge_group' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: build sdist and wheel
        run: uv build

      - name: Upload wheel
        uses: actions/upload-artifact@v4.0.0
        with:
          name: Python Package
          if-no-files-found: error
          path: |
            dist/randovania-*.tar.gz
            dist/randovania-*.whl


  resolver:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    name: Resolver

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install $(cat .github/linux_apt_dependencies.txt)

      - name: Install Python packages
        run: uv sync --frozen --extra gui --extra exporters --extra test

      - name: run pytest
        run: uv run pytest --cov randovania --cov-append --cov-report=xml --durations=100 -n auto --skip-gui-tests test/resolver/test_resolver.py test/generator/test_generator_reach.py

      - name: codecov
        uses: Wandalen/wretry.action@master
        with:
          action: codecov/codecov-action@v4
          with: |
            fail_ci_if_error: false
            files: ./coverage.xml
            token: ${{ secrets.CODECOV_TOKEN }}
          attempt_limit: 5
          attempt_delay: 10000

  pytest:
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: "Linux", image: ubuntu-latest }
          - { name: "macOS", image: macos-13 }
          - { name: "Windows", image: windows-latest }
        is_merge_queue:
          - ${{ github.event_name == 'merge_queue' }}
        is_stable:
          - ${{ startsWith(github.ref, 'refs/heads/stable') || startsWith(github.ref, 'refs/tags/v') }}

        exclude:
          - is_merge_queue: true
            os: { name: "Linux", image: ubuntu-latest }
          - is_merge_queue: true
            os: { name: "macOS", image: macos-13 }

    runs-on: ${{ matrix.os.image }}
    timeout-minutes: 30

    name: ${{ matrix.os.name }}

    env:
      # Due to https://github.com/eventlet/eventlet/issues/670, merely importing eventlet during a test running with
      # pytest-async causes an error. Settings EVENTLET_IMPORT_VERSION_ONLY allows us to avoid that error, but this
      # instead causes the flask_socketio to fail importing. Setting FLASK_RUN_FROM_CLI causes it to default to the
      # threading async method instead, avoiding the issue
      EVENTLET_IMPORT_VERSION_ONLY: ${{ matrix.os.image == 'macos-13' && '1' || '0' }}
      FLASK_RUN_FROM_CLI: ${{ matrix.os.image == 'macos-13' && '1' || '0' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install xvfb xserver-xephyr tigervnc-standalone-server $(cat .github/linux_apt_dependencies.txt)
        if: matrix.os.image == 'ubuntu-latest'

      - name: Install Python packages
        run: uv sync --frozen --all-extras

      - name: create test game
        run: uv run coverage run -m randovania development add-new-game --enum-name TEST_GAME --enum-value test_game --short-name TG --long-name "Test Game"
        if: ${{ !matrix.is_stable }}

      - name: run pytest
        run: $PREFIX uv run pytest --cov randovania --cov-append --cov-report=xml --skip-resolver-tests -n auto --durations=100
        shell: bash
        env:
          QT_QPA_PLATFORM: "${{ matrix.os.image == 'ubuntu-latest' && 'xcb' || '' }}"
          PREFIX: "${{ matrix.os.image == 'ubuntu-latest' && 'xvfb-run' || '' }}"

      - name: codecov
        uses: Wandalen/wretry.action@master
        with:
          action: codecov/codecov-action@v4
          with: |
            fail_ci_if_error: false
            files: ./coverage.xml
            token: ${{ secrets.CODECOV_TOKEN }}
          attempt_limit: 5
          attempt_delay: 10000

  executable:
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: "Linux", image: ubuntu-latest }
          - { name: "macOS", image: macos-13 }
          - { name: "Windows", image: windows-latest }

        is_merge_queue:
          - ${{ github.event_name == 'merge_queue' }}
        is_stable:
          - ${{ startsWith(github.ref, 'refs/heads/stable') || startsWith(github.ref, 'refs/tags/v') }}

        exclude:
          - is_merge_queue: true
            os: { name: "Linux", image: ubuntu-latest }
          - is_merge_queue: true
            os: { name: "macOS", image: macos-13 }

    runs-on: ${{ matrix.os.image }}
    timeout-minutes: 30

    name: ${{ matrix.os.name }} Executable

    env:
      # Due to https://github.com/eventlet/eventlet/issues/670, merely importing eventlet during a test running with
      # pytest-async causes an error. Settings EVENTLET_IMPORT_VERSION_ONLY allows us to avoid that error, but this
      # instead causes the flask_socketio to fail importing. Setting FLASK_RUN_FROM_CLI causes it to default to the
      # threading async method instead, avoiding the issue
      EVENTLET_IMPORT_VERSION_ONLY: ${{ matrix.os.image == 'macos-13' && '1' || '0' }}
      FLASK_RUN_FROM_CLI: ${{ matrix.os.image == 'macos-13' && '1' || '0' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install xvfb xserver-xephyr tigervnc-standalone-server x11-utils gnumeric libxcb-cursor0 libxkbcommon-x11-0
        if: matrix.os.image == 'ubuntu-latest'

      - name: Install Python packages
        run: uv sync --frozen --extra gui --extra exporters --extra test --group installer

      - name: create executable
        run: uv run tools/create_release.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OBFUSCATOR_SECRET: ${{ secrets.OBFUSCATOR_SECRET }}
          SENTRY_CLIENT_URL: ${{ secrets.SENTRY_CLIENT_URL }}
          PRODUCTION: ${{ matrix.is_stable }}

      - name: executable check
        run: dist/randovania/randovania --version

      - name: executable test
        run: dist/randovania/randovania --pytest --skip-gui-tests --skip-echo-tool --skip-resolver-tests --durations=100 --ignore=test/server --ignore=test/cli/commands/test_website.py --ignore=test/cli/commands/test_export_videos.py

# TODO: this causes CI to hang
#      - name: executable startup check
#        run: $PREFIX dist/randovania/randovania gui main --instantly-quit
#        shell: bash
#        env:
#          QT_QPA_PLATFORM: "${{ matrix.os.image == 'ubuntu-latest' && 'xcb' || '' }}"
#          PREFIX: "${{ matrix.os.image == 'ubuntu-latest' && 'xvfb-run' || '' }}"

      - name: Upload artifacts
        if: ${{ (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'merge_group' }}
        uses: actions/upload-artifact@v4.0.0
        with:
          name: Randovania ${{ matrix.os.name }} Executable
          if-no-files-found: error
          path: |
            dist/randovania-*.zip
            dist/randovania-*.tar.gz
            dist/randovania-*.7z

  installer:
    runs-on: windows-latest
    needs: executable
    name: Build Windows Installer
    if: ${{ (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'merge_group' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download the executable
        uses: actions/download-artifact@v4
        with:
          name: Randovania Windows Executable
          path: packages/

      - name: Get version
        id: version
        shell: bash
        run: |
          echo "version=$(ls packages/ | cut -f2 -d- | sed 's/.dev/./')" >> $GITHUB_OUTPUT

      - name: Extract executable
        run: |
          7z x packages/* -odist

      - name: Rename the extracted package
        shell: bash
        run: |
          mv dist/randovania-* dist/randovania

      - name: Remove dotnet from package
        shell: bash
        run: |
          rm -r dist/randovania/_internal/data/dotnet_runtime

      - name: import windows certificate
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_SIGNING_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: Deploy Advanced Installer
        uses: caphyon/advinst-github-action@v2.0
        with:
          advinst-version: '22.0'
          advinst-license: ${{ secrets.ADVANCED_INSTALLER_LICENSE }}
          advinst-enable-automation: 'true'

      - name: Make changes for dev installer
        shell: pwsh
        if: ${{ !startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/heads/stable') }}
        run: |
          # Load the AIP project from checkout location
          $aipPath = join-path $env:GITHUB_WORKSPACE "tools/Randovania Installer.aip";
          Write-Host "AIP: $aipPath";
          $advinst = new-object -com advancedinstaller;
          $project = $advinst.LoadProject($aipPath);
          $productDetails = $project.ProductDetails;

          # Use dev upgrade code
          $productDetails.UpgradeCode.UpgradeCode = "{7583BC7E-D9ED-4428-A9AD-AE60AE48D4A2}";
          # Use dev name
          $productDetails.Name = "Randovania Dev";

          # Save the changes
          $project.Save();

      - name: Create Windows installer
        shell: pwsh
        run: |
          # Load the AIP project from checkout location
          $aipPath = join-path $env:GITHUB_WORKSPACE "tools/Randovania Installer.aip";
          Write-Host "AIP: $aipPath";
          $advinst = new-object -com advancedinstaller;
          $project = $advinst.LoadProject($aipPath);
          $productDetails = $project.ProductDetails;

          # Bump the ProductVersion
          $productDetails.Version = "${{ steps.version.outputs.version }}";
          Write-Host "Version: $productDetails.Version";

          # Build the project
          $project.Build();

      - name: Upload installer
        uses: actions/upload-artifact@v4.0.0
        with:
          name: Randovania Windows Installer
          if-no-files-found: error
          path: |
            dist/Randovania*Installer.exe

  flatpak:
    runs-on: ubuntu-latest
    needs: executable
    name: Build Flatpak
    if: ${{ (startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'merge_group' }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Download the executable
        uses: actions/download-artifact@v4
        with:
          name: Randovania Linux Executable
          path: packages/

      - name: Apt
        run: sudo apt-get -q update && sudo apt-get -y install flatpak flatpak-builder

      - name: Flatpak Dependencies
        run: |
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//22.08 org.freedesktop.Sdk//22.08 org.freedesktop.Sdk.Extension.mono6//22.08

      - name: Build the flatpak
        shell: bash
        run: uv run ./tools/build_flatpak.py --repository ./flatpak-repo packages/*.tar.gz

  docker:
    runs-on: ubuntu-latest
    name: Docker
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=randovania/server
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi
          echo version=${VERSION} >> $GITHUB_OUTPUT
          echo tags=${TAGS} >> $GITHUB_OUTPUT
          echo created=$(date -u +'%Y-%m-%dT%H:%M:%SZ') >> $GITHUB_OUTPUT

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Should Push
        id: decide_push
        env:
            SHOULD_PUSH: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' && !startsWith(github.ref, 'refs/heads/stable') }}
        run: |
          echo should=${SHOULD_PUSH} >> $GITHUB_OUTPUT

      -
        name: Login to DockerHub
        if: ${{ fromJSON(steps.decide_push.outputs.should) }}
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile.server
          platforms: linux/amd64
          load: ${{ !fromJSON(steps.decide_push.outputs.should) }}
          push: ${{ fromJSON(steps.decide_push.outputs.should) }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}

      -
        name: Test image
        run: |
          docker run --rm --entrypoint /bin/bash randovania/server:${{ steps.prep.outputs.version }} tools/server_image_test.sh

  release:
    runs-on: 'ubuntu-latest'
    name: Release
    needs:
      - wheel
      - pytest
      - executable
      - docker
      - installer
    if: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.8"
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Download the executables
        uses: actions/download-artifact@v4.1.0
        with:
          pattern: '* *'
          path: packages/

      - name: Decide environment
        id: decide_env
        run: |
          ENV=staging
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            ENV=production
          fi
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            if [[ $GITHUB_REF == refs/heads/stable ]]; then
              ENV="${{ inputs.server_environment }}"
            fi
            echo should_deploy=${{ inputs.deploy_server }} >> $GITHUB_OUTPUT
          else
            echo should_deploy=${{ !startsWith(github.ref, 'refs/heads/stable') }} >> $GITHUB_OUTPUT
          fi
          echo env=${ENV} >> $GITHUB_OUTPUT

      - name: Find Randovania version
        id: randovania_version
        run: |
          echo version=$(uv run tools/get_version_from_artifacts.py "packages/Randovania Linux Executable/") >> $GITHUB_OUTPUT

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: randovania
        with:
          environment: ${{ steps.decide_env.outputs.env }}
          projects: randovania-client randovania-bot randovania-server
          version: "v${{ steps.randovania_version.outputs.version }}"

      - name: Upload binaries to GitHub Release
        uses: svenstaro/upload-release-action@2.9.0
        if: ${{ startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/stable') }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: packages/Randovania*/**
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          draft: ${{ startsWith(github.ref, 'refs/heads/stable') }}
          body: "Release executable"

      - name: Publish 📦 to TestPyPI
        if: ${{ startsWith(github.ref, 'refs/heads/stable') }}
        run: |
          uvx twine upload --repository testpypi packages/Python\ Package/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.testpypi_password }}

      - name: Publish 📦 to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          uvx twine upload packages/Python\ Package/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}

      - name: Discord Notifications
        run: uv run tools/post_discord_webhook.py --version "${{ steps.randovania_version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_DEPLOYMENT_KEY }}
          known_hosts: ${{ secrets.SERVER_KNOWN_HOSTS }}

      - name: start deployment
        uses: bobheadxi/deployments@v1.5.0
        id: deployment
        if: ${{ steps.decide_env.outputs.should_deploy == 'true' }}
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.decide_env.outputs.env }}

      - name: deploy server
        if: ${{ steps.decide_env.outputs.should_deploy == 'true' }}
        run: uv run tools/deploy_server.py

      - name: update deployment status
        uses: bobheadxi/deployments@v1.5.0
        if: always() && steps.decide_env.outputs.should_deploy == 'true'
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          override: false

  update-website:
    runs-on: ubuntu-latest
    name: Update the website
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: release
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WEBSITE_VERSION_UPDATER_PAT }}
          repository: randovania/randovania.github.io
          path: ./website

      - name: Find new version
        id: new_version
        env:
          TAG_NAME: ${{ github.ref }}
        run: |
          # Tag is of format refs/tags/vX.Y.Z, cut everything before X.Y.Z off.
          echo "NEW_VERSION=${TAG_NAME:11}" >> $GITHUB_OUTPUT

      - name: Replace version, commit and push
        run: |
          cd website
          echo "${{ steps.new_version.outputs.NEW_VERSION }}" > ./randovania-version.txt
          git config user.name Website-Version-Updater
          git config user.email invalid@example.com
          git add ./randovania-version.txt
          git commit -m "Update version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git push

  notify_failure:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ failure() && github.event_name != 'pull_request' && github.event_name != 'merge_group' }}
    steps:
      - name: Alert Failure
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.GENERAL_TALK_WEBHOOK }}
          nodetail: true
          title: CI failed!
          description: |
            [CI failed for `${{ github.ref_name }}`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
